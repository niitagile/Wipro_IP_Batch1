**************Streams
-Not a data structure
-Designed for lambdas
-Do not support indexed access
-Can easily be aggregated as arrays or lists
-Lazy access supported
-Parallelizable

***************Creating Streams
------Stream.of()

public class StreamBuilders 
{
     public static void main(String[] args)
     {
         Stream<Integer> stream = Stream.of(1,2,3,4,5,6,7,8,9);
         stream.forEach(p -> System.out.println(p));
     }
}

// Stream from array
private static Employee[] arrayOfEmps = {
    new Employee(1, "Jeff Bezos", 100000.0), 
    new Employee(2, "Bill Gates", 200000.0), 
    new Employee(3, "Mark Zuckerberg", 300000.0)
};

Stream.of(arrayOfEmps);
stream.forEach(p->p.display())

//List.Stream()
public class StreamBuilders 
{
     public static void main(String[] args)
     {
         List<Integer> list = new ArrayList<Integer>();
 
         for(int i = 1; i< 10; i++){
             list.add(i);
         }
 
         Stream<Integer> stream = list.stream();
         stream.forEach(p -> System.out.println(p));
     }
}




int addition(int a, int b){
return a+b;
}

int square(int val){

return val*val;
}


int ans=addition(4,5);
int sq=square(ans);

int sq=square(addition(4,5));

addition(4,5).square()

square((a,b)-> a+b)


Here is the list of all Stream intermediate operations:

filter()
map()
flatMap()
distinct()
sorted()
peek()
limit()
skip()



Terminal Operations :

forEach(), 
toArray(), 
reduce(), 
collect(), 
min(), 
max(), 
count(), 
anyMatch(), 
allMatch(), 
noneMatch(), 
findFirst(), 
findAny()



pipeline

stream--> intermediate operation-->intermediate operation--> terminator operation


